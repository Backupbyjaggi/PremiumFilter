from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from pyrogram.errors.exceptions.bad_request_400 import MessageTooLong, PeerIdInvalid
from info import ADMINS, LOG_CHANNEL, SUPPORT_CHAT, MELCOW_NEW_USERS
from database.users_chats_db import db
from database.ia_filterdb import Media
from utils import get_size, temp, get_settings
from Script import script
from pyrogram.errors import ChatAdminRequired

"""-----------------------------------------https://t.me/GetTGLink/4179 --------------------------------------"""

@Client.on_message(filters.new_chat_members & filters.group)
async def save_group(bot, message):
    r_j_check = [u.id for u in message.new_chat_members]
    if temp.ME in r_j_check:
        if not await db.get_chat(message.chat.id):
            total=await bot.get_chat_members_count(message.chat.id)
            r_j = message.from_user.mention if message.from_user else "Anonymous" 
            await bot.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, r_j))       
            await db.add_chat(message.chat.id, message.chat.title)
        if message.chat.id in temp.BANNED_CHATS:
            # Inspired from a boat of a banana tree
            buttons = [[
                InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/{SUPPORT_CHAT}')
            ]]
            reply_markup=InlineKeyboardMarkup(buttons)
            k = await message.reply(
                text='<b>·¥Ñ ú·¥Ä·¥õ …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö üêû\n\nM è ·¥Ä·¥Ö·¥ç…™…¥Íú±  ú·¥ÄÍú±  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö ·¥ç·¥á “ì Ä·¥è·¥ç ·¥°·¥è Ä·¥ã…™…¥…¢  ú·¥á Ä·¥á ! I“ì  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ …™·¥õ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ..</b>',
                reply_markup=reply_markup,
            )

            try:
                await k.pin()
            except:
                pass
            await bot.leave_chat(message.chat.id)
            return
        buttons = [[
            InlineKeyboardButton('‚ÑπÔ∏è H·¥á ü·¥ò ‚ÑπÔ∏è', url=f"https://t.me/{temp.U_NAME}?start=help"),
            InlineKeyboardButton('üì¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás üì¢', url='https://t.me/BackupByJaggi')
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await message.reply_text(
            text=f"<b>·¥õ ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥Ä·¥Ö·¥Ö…™…¥…¢ ·¥ç·¥á …™…¥ {message.chat.title} ‚ù£Ô∏è\n\n…™“ì ·¥ú ·¥Äs·¥ã «´·¥ú·¥ás·¥õ…™·¥è…¥s & ·¥Ö·¥è·¥ú ô·¥õs …™…¥ s·¥ú·¥ò·¥ò·¥è Ä·¥õ</b>",
            reply_markup=reply_markup)
    else:
        settings = await get_settings(message.chat.id)
        if settings["welcome"]:
            for u in message.new_chat_members:
                if (temp.MELCOW).get('welcome') is not None:
                    try:
                        await (temp.MELCOW['welcome']).delete()
                    except:
                        pass
                temp.MELCOW['welcome'] = await message.reply(f"<b>Hey , {u.mention}, Welcome to {message.chat.title}</b>")


@Client.on_message(filters.command('leave') & filters.user(ADMINS))
async def leave_a_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat = int(chat)
    except:
        chat = chat
    try:
        buttons = [[
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/{SUPPORT_CHAT}')
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat,
            text='<b>Hello Friends, \nMy admin has told me to leave from group so i go! If you wanna add me again contact my support group.</b>',
            reply_markup=reply_markup,
        )

        await bot.leave_chat(chat)
        await message.reply(f"left the chat `{chat}`")
    except Exception as e:
        await message.reply(f'Error - {e}')

@Client.on_message(filters.command('disable') & filters.user(ADMINS))
async def disable_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "No reason Provided"
    try:
        chat_ = int(chat)
    except:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    cha_t = await db.get_chat(int(chat_))
    if not cha_t:
        return await message.reply("·¥Ñ ú·¥Ä·¥õ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥ç è ·¥Ö ô")
    if cha_t['is_disabled']:
        return await message.reply(f"·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö:\nReason-<code> {cha_t['reason']} </code>")
    await db.disable_chat(int(chat_), reason)
    temp.BANNED_CHATS.append(int(chat_))
    await message.reply('·¥Ñ ú·¥Ä·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö')
    try:
        buttons = [[
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/{SUPPORT_CHAT}')
        ]]
        reply_markup=InlineKeyboardMarkup(buttons)
        await bot.send_message(
            chat_id=chat_, 
            text=f'<b> ú·¥á ü ü·¥è “ì Ä…™·¥á…¥·¥Ö, \nM è ·¥Ä·¥Ö·¥ç…™…¥  ú·¥ÄÍú± ·¥õ·¥è ü·¥Ö ·¥ç·¥á ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò Íú±·¥è …™ …¢·¥è! I“ì  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥Ä…¢·¥Ä…™…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò.</b> \nReason : <code>{reason}</code>',
            reply_markup=reply_markup)
        await bot.leave_chat(chat_)
    except Exception as e:
        await message.reply(f"Error - {e}")


@Client.on_message(filters.command('enable') & filters.user(ADMINS))
async def re_enable_chat(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat_ = int(chat)
    except:
        return await message.reply('…¢…™ ô·¥á ·¥ç·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    sts = await db.get_chat(int(chat))
    if not sts:
        return await message.reply("·¥Ñ ú·¥Ä·¥õ …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö …™…¥ ·¥ç è ·¥Ö ô !")
    if not sts.get('is_disabled'):
        return await message.reply('·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ …™s …¥·¥è·¥õ  è·¥á·¥õ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö.')
    await db.re_enable_chat(int(chat_))
    temp.BANNED_CHATS.remove(int(chat_))
    await message.reply("·¥Ñ ú·¥Ä·¥õ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á-·¥á…¥·¥Ä ô ü·¥á·¥Ö")


@Client.on_message(filters.command('stats') & filters.incoming)
async def get_ststs(bot, message):
    rju = await message.reply('“ì·¥á·¥õ·¥Ñ ú…™…¥…¢ s·¥õ·¥Ä·¥õs..')
    total_users = await db.total_users_count()
    totl_chats = await db.total_chat_count()
    files = await Media.count_documents()
    size = await db.get_db_size()
    free = 536870912 - size
    size = get_size(size)
    free = get_size(free)
    await rju.edit(script.STATUS_TXT.format(files, total_users, totl_chats, size, free))


# a function for trespassing into others groups, Inspired by a Vazha
# Not to be used , But Just to showcase his vazhatharam.
# @Client.on_message(filters.command('invite') & filters.user(ADMINS))
async def gen_invite(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    chat = message.command[1]
    try:
        chat = int(chat)
    except:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä·¥õ …™·¥Ö')
    try:
        link = await bot.create_chat_invite_link(chat)
    except ChatAdminRequired:
        return await message.reply("I…¥·¥†…™·¥õ·¥á L…™…¥·¥ã G·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ F·¥Ä…™ ü·¥á·¥Ö, I·¥Ä·¥ç N·¥è·¥õ H·¥Ä·¥†…™…¥…¢ S·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ R…™…¢ ú·¥õÍú±")
    except Exception as e:
        return await message.reply(f'Error {e}')
    await message.reply(f' ú·¥á Ä·¥á ·¥ú Ä …™…¥·¥†…™·¥õ·¥á  ü…™…¥·¥ã {link.invite_link}')

@Client.on_message(filters.command('ban') & filters.user(ADMINS))
async def ban_a_user(bot, message):
    # https://t.me/GetTGLink/4185
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä …™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "No reason Provided"
    try:
        chat = int(chat)
    except:
        pass
    try:
        k = await bot.get_users(chat)
    except PeerIdInvalid:
        return await message.reply("T ú…™Íú± …™Íú± ·¥Ä…¥ …™…¥·¥†·¥Ä ü…™·¥Ö ·¥úÍú±·¥á Ä, ·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™·¥Ä  ú·¥Ä·¥†·¥á ·¥ç·¥á·¥õ  ú…™·¥ç  ô·¥á“ì·¥è Ä·¥á.")
    except IndexError:
        return await message.reply("T ú…™Íú± ·¥ç…™…¢ ú·¥õ  ô·¥á ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü, ·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™·¥õÍú± ·¥Ä ·¥úÍú±·¥á Ä.")
    except Exception as e:
        return await message.reply(f'Error - {e}')
    else:
        jar = await db.get_ban_status(k.id)
        if jar['is_banned']:
            return await message.reply(f"{k.mention} …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ô·¥Ä…¥…¥·¥á·¥Ö \nReason: {jar['ban_reason']}")
        await db.ban_user(k.id, reason)
        temp.BANNED_USERS.append(k.id)
        await message.reply(f"s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö {k.mention}")


    
@Client.on_message(filters.command('unban') & filters.user(ADMINS))
async def unban_a_user(bot, message):
    if len(message.command) == 1:
        return await message.reply('…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥ús·¥á Ä …™·¥Ö/·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á')
    r = message.text.split(None)
    if len(r) > 2:
        reason = message.text.split(None, 2)[2]
        chat = message.text.split(None, 2)[1]
    else:
        chat = message.command[1]
        reason = "No reason Provided"
    try:
        chat = int(chat)
    except:
        pass
    try:
        k = await bot.get_users(chat)
    except PeerIdInvalid:
        return await message.reply("T ú…™Íú± …™Íú± ·¥Ä…¥ …™…¥·¥†·¥Ä ü…™·¥Ö ·¥úÍú±·¥á Ä, ·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™·¥Ä  ú·¥Ä·¥†·¥á ·¥ç·¥á·¥õ  ú…™·¥ç  ô·¥á“ì·¥è Ä·¥á.,")
    except IndexError:
        return await message.reply("T ú…™Íú± ·¥ç…™…¢ ú·¥õ  ô·¥á ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü, ·¥ç·¥Ä·¥ã·¥á Íú±·¥ú Ä·¥á …™·¥õÍú± ·¥Ä ·¥úÍú±·¥á Ä..")
    except Exception as e:
        return await message.reply(f'Error - {e}')
    else:
        jar = await db.get_ban_status(k.id)
        if not jar['is_banned']:
            return await message.reply(f"{k.mention} …™s …¥·¥è·¥õ  è·¥á·¥Ö  ô·¥Ä…¥…¥·¥á·¥Ö ")
        await db.remove_ban(k.id)
        temp.BANNED_USERS.remove(k.id)
        await message.reply(f"s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è  ô·¥Ä…¥…¥·¥á·¥Ö {k.mention}")


    
@Client.on_message(filters.command('users') & filters.user(ADMINS))
async def list_users(bot, message):
    # https://t.me/GetTGLink/4184
    raju = await message.reply('…¢·¥á·¥õ·¥õ…™…¥…¢  ü…™s·¥õs ·¥è“ì ·¥ús·¥á Äs')
    users = await db.get_all_users()
    out = "·¥ús·¥á Äs s·¥Ä·¥†·¥á·¥Ö …™…¥ ·¥ç è ·¥Ö ô:\n\n"
    async for user in users:
        out += f"<a href=tg://user?id={user['id']}>{user['name']}</a>"
        if user['ban_status']['is_banned']:
            out += '( Banned User )'
        out += '\n'
    try:
        await raju.edit_text(out)
    except MessageTooLong:
        with open('users.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('users.txt', caption="List Of Users")

@Client.on_message(filters.command('chats') & filters.user(ADMINS))
async def list_chats(bot, message):
    raju = await message.reply('…¢·¥á·¥õ·¥õ…™…¥…¢  ü…™s·¥õs ·¥è“ì ·¥ús Ä Äs')
    chats = await db.get_all_chats()
    out = "·¥Ñ ú·¥Ä·¥õs s·¥Ä·¥†·¥á·¥Ö …™…¥ ·¥ç è ·¥Ö ô:\n\n"
    async for chat in chats:
        out += f"**Title:** `{chat['title']}`\n**- ID:** `{chat['id']}`"
        if chat['chat_status']['is_disabled']:
            out += '( Disabled Chat )'
        out += '\n'
    try:
        await raju.edit_text(out)
    except MessageTooLong:
        with open('chats.txt', 'w+') as outfile:
            outfile.write(out)
        await message.reply_document('chats.txt', caption="List Of Chats")
